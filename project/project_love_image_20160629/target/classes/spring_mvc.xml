<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
     xmlns:mvc="http://www.springframework.org/schema/mvc"
     xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="
    	http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd ">  
  
    <!--引入配置属性文件 -->  
    <context:property-placeholder location="classpath:jdbc.properties,classpath:redis.properties,classpath:timer.properties" />  
  
  	<!-- 配置数据源 使用的是Druid数据源 
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
        <property name="initialSize" value="10" />  
        <property name="maxActive" value="20" />  
        <property name="minIdle" value="1" />  
        <property name="maxWait" value="60000" />  
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize"  value="20" />  
        <property name="validationQuery" value="${validationQuery}" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
        <property name="removeAbandoned" value="true" />  
        <property name="removeAbandonedTimeout" value="1800" />  
        <property name="logAbandoned" value="true" />  
        <property name="filters" value="mergeStat" />  
    </bean>  -->  
    
    <!-- 配置事务管理器 
    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  -->  
  
    <!-- 拦截器方式配置事物 
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="insert*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />  
        </tx:attributes>  
    </tx:advice>  -->  
    
    <!-- Spring aop事务管理 
    <aop:config>  
        <aop:pointcut id="transactionPointcut"  expression="execution(* love.image.service..*Impl.*(..))" />  
        <aop:advisor pointcut-ref="transactionPointcut"  advice-ref="transactionAdvice" />  
    </aop:config>  -->  
    
    
    
    <!-- jdbcTemplate配置,用于执行sql批处理 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean> --> 
  
    <!-- myBatis XML文件  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="mapperLocations" value="classpath:love/image/mapper/*.xml" />  
    </bean>  --> 
    
   <!-- myBatis DAO文件 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="love.image.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />  
    </bean>  --> 
  
    
    <!--自动扫描含有@Service将其注入为bean  
    <context:component-scan base-package="love.image.service" />  --> 
    
    
    
    <!-- 自动扫描controller包下的所有类，如果@Controller注入为bean -->
    <context:component-scan base-package="love.image.controller" />    

	<!-- 
	<bean name="user" class="love.image.controller.UserController"></bean>
	 -->
	
	
  
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->  
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter" >
  	 		 		<property name="features">
  	 		 			<array value-type="com.alibaba.fastjson.serializer.SerializerFeature">  
           					<value>WriteMapNullValue</value>   
           					<value>WriteNullStringAsEmpty</value>
           					<value>WriteDateUseDateFormat</value> 
           					<value>WriteNullNumberAsZero</value>
           					<value>DisableCircularReferenceDetect</value>
        				</array>  
  	 		 		</property>
  	 		 	</bean>
            </list>  
        </property>  
    </bean>  
  
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->  
    <bean  
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="viewClass"  
            value="org.springframework.web.servlet.view.JstlView" />  
        <property name="prefix" value="/WEB-INF/jsp" />  
        <property name="suffix" value=".jsp" />  
    </bean>  
  
    <!-- 配置多文件上传 -->  
    <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <property name="defaultEncoding">  
            <value>UTF-8</value>  
        </property>  
        <property name="maxUploadSize">  
            <!-- 上传文件大小限制为31M，31*1024*1024 -->  
            <value>32505856</value>  
        </property>  
        <property name="maxInMemorySize">  
            <value>4096</value>  
        </property>  
    </bean>  
    


    <!-- Redis集群的配置 
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}" />
	</bean>  -->
	
	<!-- Redis集群连接池 
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg name="host" value="${redis.host}" />
				</bean>
			</list>
		</constructor-arg>
	</bean>  -->
	
	
	<!-- 拦截器配置文件-->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/*/**/" />
			<bean class="love.image.intercepter.AppInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
    
    <!-- 定时器配置文件-->
	<bean id="UpdateTimer" class="love.image.timer.UpdateTimer" />

	<bean id="UpdateTimerJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="UpdateTimer"></ref>
		</property>
		<property name="targetMethod">
			<value>execute</value>
		</property>
	</bean>

	<bean id="UpdateTimerJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="UpdateTimerJob"></ref>
		</property>
		<property name="cronExpression" value="${timer.cronExpression}"></property>
	</bean>

	<bean id="CalTimerTaskJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="UpdateTimerJobTrigger" />
			</list>
		</property>
	</bean>
    
    
    
</beans>  